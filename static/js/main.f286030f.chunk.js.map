{"version":3,"sources":["litmos2.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Navbar","bg","variant","Brand","href","Nav","className","Link","src","litmos","style","height","width","marginRight","Form","inline","FormControl","type","placeholder","Button","textAlign","marginTop","marginLeft","class","fontSize","Fragment","CssBaseline","Container","maxWidth","float","Typography","component","backgroundColor","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,qC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,sMC0C5BC,MA7Bf,WACE,OACE,8BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,SACzB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,QACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,qDAAf,qBAEF,yBAAKI,IAAKC,IAAQC,MAAO,CAACC,OAAO,OAAQC,MAAM,QAASC,YAAY,WACpE,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,yBAAyBZ,UAAU,YACxE,kBAACa,EAAA,EAAD,CAAQjB,QAAQ,mBAAhB,YAGJ,yBAAKI,UAAU,OACb,wBAAII,MAAO,CAACU,UAAW,OAAQC,UAAU,OAAQC,WAAW,SAA5D,0BACA,uBAAGC,MAAM,OAAOb,MAAO,CAACU,UAAU,OAAQE,WAAW,OAAQV,MAAM,QAASY,SAAS,SAArF,qLAGF,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKlB,MAAO,CAACmB,MAAM,OAAQP,WAAY,SACzD,kBAACQ,EAAA,EAAD,CAAYC,UAAU,MAAMrB,MAAO,CAAEsB,gBAAiB,UAAWrB,OAAQ,QAASC,MAAO,QAASqB,aAAa,cCvBrGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f286030f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/litmos2.bcc3d988.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport { Nav } from 'react-bootstrap';\nimport { Navbar } from 'react-bootstrap';\nimport { Form } from 'react-bootstrap';\nimport { FormControl } from 'react-bootstrap';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport litmos from './litmos2.png';\n\nfunction App() {\n  return (\n    <body>\n      <Navbar bg=\"light\" variant=\"light\">\n        <Navbar.Brand href=\"#home\">Home</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"https://litmos.aha.io/products/LIT/ideas_overview\">Litmos Aha! Page</Nav.Link>\n        </Nav>\n        <img src={litmos} style={{height:'40px', width:'250px', marginRight:'190px'}}/>\n        <Form inline>\n          <FormControl type=\"text\" placeholder=\"Search for Idea Topics\" className=\"mr-sm-2\" />\n          <Button variant=\"outline-primary\">Search</Button>\n        </Form>\n      </Navbar>\n      <div className=\"App\">\n        <h1 style={{textAlign: 'left', marginTop:'40px', marginLeft:'80px'}}> Litmos Aha! Analytics</h1>\n        <p class=\"lead\" style={{textAlign:'left', marginLeft:'80px', width:'700px', fontSize:'15px'}}> Welcome to the Litmos Aha! Analytics webpage: a site that provides live analytics on Aha! ideas for Litmos. The data is drawn from Aha!'s REST API and is updated upon request. \n        </p>\n      </div>\n      <React.Fragment>\n        <CssBaseline />\n        <Container maxWidth=\"sm\" style={{float:'left', marginLeft: '55px'}}>\n          <Typography component=\"div\" style={{ backgroundColor: '#fef3bd', height: '100vh', width: '200vh', marginBottom:'50px'}} />\n        </Container>\n      </React.Fragment>\n    </body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}